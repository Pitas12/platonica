from enum import Enum

class Shape(Enum):
  tetrahedron = "tetrahedron"
  cube = "cube"
  octahedron = "octahedron"
  dodecahedron = "dodecahedron"
  icosahedron = "icosahedron"

class FaceShape(Enum):
  triangle = 'triangle'
  square = 'square'
  pentagon = 'pentagon'


def face_vertices_from_indices(
    vertices: list[tuple[float,float,float]],
    face_indices: list[tuple[int,int,int]]
):
    face_vertices = []
    for vert_indices in face_indices:
        face_vertices.append(
            [vertices[vert_index] for vert_index in vert_indices]
        )
    return face_vertices

SHAPE_VERTICES = {
  Shape.tetrahedron: face_vertices_from_indices([
    ( 1,  1,  1),
    (-1,  1, -1),
    ( 1, -1, -1),
    (-1, -1,  1)
  ], [
    (2, 3, 0),
    (3, 2, 1),
    (1, 0, 3),
    (0, 1, 2)
  ]),
  Shape.cube: face_vertices_from_indices([
    (-1, -1, 1),    # 0
    (1, -1, 1),     # 1
    (1, 1, 1),      # 2
    (-1, 1, 1),     # 3
    (-1, 1, -1),    # 4
    (-1, -1, -1),   # 5
    (1, -1, -1),    # 6
    (1, 1, -1),     # 7
  ],[
    (0, 3, 2, 1), # Z = 1
    (0, 5, 4, 3), # X = -1
    (3, 4, 7, 2), # Y = 1
    (2, 7, 6, 1), # X = 1
    (4, 5, 6, 7), # Z = -1
    (5, 0, 1, 6), # Y = -1
  ]),
  Shape.octahedron: face_vertices_from_indices([
    (1.0, 0.0, 0.0),
    (-1.0, 0.0, 0.0),
    (0.0, 1.0, 0.0),
    (0.0, -1.0, 0.0),
    (0.0, 0.0, 1.0),
    (0.0, 0.0, -1.0)
  ],[
    (2, 0, 4),
    (0, 2, 5),
    (1, 2, 4),
    (2, 1, 5),
    (3, 1, 4),
    (1, 3, 5),
    (0, 3, 4),
    (3, 0, 5)
  ]),
  Shape.icosahedron: face_vertices_from_indices([
    (0.8506507873535156, 0.525731086730957, 0.0),
    (-0.8506507873535156, 0.525731086730957, 0.0),
    (0.8506507873535156, -0.525731086730957, 0.0),
    (-0.8506507873535156, -0.525731086730957, 0.0),

    (0.525731086730957, 0.0, 0.8506507873535156),
    (0.525731086730957, 0.0, -0.8506507873535156),
    (-0.525731086730957, 0.0, 0.8506507873535156),
    (-0.525731086730957, 0.0, -0.8506507873535156),

    (0.0, 0.8506507873535156, 0.525731086730957),
    (0.0, -0.8506507873535156, 0.525731086730957),
    (0.0, 0.8506507873535156, -0.525731086730957),
    (0.0, -0.8506507873535156, -0.525731086730957),
  ], [
    (0, 4, 8),
    (4, 0, 2),
    (5, 2, 0),
    (2, 5, 11),

    (10, 0, 8),
    (0, 10, 5),
    (7, 5, 10),
    (5, 7, 11),

    (1, 10, 8),
    (10, 1, 7),
    (3, 7, 1),
    (7, 3, 11),

    (6, 1, 8),
    (1, 6, 3),
    (9, 3, 6),
    (3, 9, 11),

    (4, 6, 8),
    (6, 4, 9),
    (2, 9, 4),
    (9, 2, 11),
  ]),
  Shape.dodecahedron: face_vertices_from_indices([
    (0.5773502588272095, 0.5773502588272095, 0.5773502588272095),
    (0.5773502588272095, 0.5773502588272095, -0.5773502588272095),
    (0.5773502588272095, -0.5773502588272095, 0.5773502588272095),
    (0.5773502588272095, -0.5773502588272095, -0.5773502588272095),

    (-0.5773502588272095, 0.5773502588272095, 0.5773502588272095),
    (-0.5773502588272095, 0.5773502588272095, -0.5773502588272095),
    (-0.5773502588272095, -0.5773502588272095, 0.5773502588272095),
    (-0.5773502588272095, -0.5773502588272095, -0.5773502588272095),

    (0.35682210326194763, 0.9341723322868347, 0.0),
    (-0.35682210326194763, 0.9341723322868347, 0.0),
    (0.35682210326194763, -0.9341723322868347, 0.0),
    (-0.35682210326194763, -0.9341723322868347, 0.0),

    (0.9341723322868347, 0.0, 0.35682210326194763),
    (0.9341723322868347, 0.0, -0.35682210326194763),
    (-0.9341723322868347, 0.0, 0.35682210326194763),
    (-0.9341723322868347, 0.0, -0.35682210326194763),

    (0.0, 0.35682210326194763, 0.9341723322868347),
    (0.0, -0.35682210326194763, 0.9341723322868347),
    (0.0, 0.35682210326194763, -0.9341723322868347),
    (0.0, -0.35682210326194763, -0.9341723322868347),
  ],[
    (0, 8, 4),
    (8, 9, 4),
    (0, 12, 1),
    (12, 13, 1),
    (0, 16, 2),
    (16, 17, 2),
    (8, 1, 5),
    (1, 18, 5),
    (12, 2, 3),
    (2, 10, 3),
    (16, 4, 6),
    (4, 14, 6),
    (9, 5, 14),
    (5, 15, 14),
    (6, 11, 2),
    (11, 10, 2),
    (3, 19, 1),
    (19, 18, 1),
    (7, 15, 18),
    (15, 5, 18),
    (7, 11, 14),
    (11, 6, 14),
    (7, 19, 10),
    (19, 3, 10),
  ])
}
